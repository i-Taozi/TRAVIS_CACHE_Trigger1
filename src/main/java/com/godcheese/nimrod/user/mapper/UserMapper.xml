<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.godcheese.nimrod.user.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.godcheese.nimrod.user.entity.UserEntity">
        <id column="id" property="id" jdbcType="BIGINT"/> <!-- id -->
        <result column="username" property="username" jdbcType="VARCHAR"/> <!-- 用户名 -->
        <result column="password" property="password" jdbcType="VARCHAR"/> <!-- 用户密码 -->
        <result column="avatar" property="avatar" jdbcType="VARCHAR"/> <!-- 头像 -->
        <result column="email" property="email" jdbcType="VARCHAR"/> <!-- 电子邮箱 -->
        <result column="email_is_verified" property="emailIsVerified" jdbcType="INTEGER"/> <!-- 电子邮箱是否已验证 -->
        <result column="department_id" property="departmentId" jdbcType="BIGINT"/> <!-- 部门 id -->
        <result column="enabled" property="enabled" jdbcType="INTEGER"/> <!-- 是否启用 -->
        <result column="remark" property="remark" jdbcType="VARCHAR"/> <!-- 备注 -->
        <result column="gmt_deleted" property="gmtDeleted" jdbcType="TIMESTAMP"/> <!-- 删除时间 -->
        <result column="gmt_modified" property="gmtModified" jdbcType="TIMESTAMP"/> <!-- 更新时间 -->
        <result column="gmt_created" property="gmtCreated" jdbcType="TIMESTAMP"/> <!-- 创建时间 -->
    </resultMap>

    <sql id="TableName">
        `user`
    </sql>

    <sql id="BaseColumnList">
        `id`, `username`, `password`, `avatar`, `email`, `email_is_verified`, `department_id`, `enabled`, `remark`, `gmt_deleted`, `gmt_modified`, `gmt_created`
    </sql>

    <insert id="insertOne" useGeneratedKeys="true" keyProperty="id"
            parameterType="com.godcheese.nimrod.user.entity.UserEntity">
        insert into
        <include refid="TableName"/>
        (`username`, `password`, `avatar`, `email`, `email_is_verified`, `department_id`, `enabled`, `remark`,
        `gmt_deleted`,
        `gmt_modified`,
        `gmt_created`)
        values (#{username}, #{password}, #{avatar}, #{email}, #{emailIsVerified}, #{departmentId}, #{enabled},
        #{remark},
        #{gmtDeleted}, #{gmtModified}, #{gmtCreated})
    </insert>

    <update id="updateOne" keyProperty="id" parameterType="com.godcheese.nimrod.user.entity.UserEntity">
        update
        <include refid="TableName"/>
        set `username` = #{username}, `password` = #{password}, `avatar` = #{avatar}, `email` = #{email},
        `email_is_verified` =
        #{emailIsVerified}, `department_id` = #{departmentId}, `enabled` = #{enabled}, `remark` = #{remark},
        `gmt_modified` = #{gmtModified}
        where `id`= #{id}
    </update>

    <delete id="deleteOne" parameterType="long">
        delete from
        <include refid="TableName"/>
        where `id` = #{id}
    </delete>

    <select id="getOne" resultMap="BaseResultMap">
        select
        <include refid="BaseColumnList"/>
        from
        <include refid="TableName"/>
        where `id` = #{id} limit 1
    </select>

    <select id="getOneByDepartmentId" resultMap="BaseResultMap">
        select
        <include refid="BaseColumnList"/>
        from
        <include refid="TableName"/>
        where `department_id` = #{departmentId} limit 1
    </select>

    <select id="listAll" resultMap="BaseResultMap">
        select
        <include refid="BaseColumnList"/>
        from
        <include refid="TableName"/>
    </select>

    <!--    <select id="pageAll" resultMap="BaseResultMap" parameterType="com.github.pagehelper.Page">-->
    <!--        select-->
    <!--        <include refid="BaseColumnList"/>-->
    <!--        from-->
    <!--        <include refid="TableName"/>-->
    <!--    </select>-->
    <!--    <select id="countAll" resultType="int">-->
    <!--        select count(1) from-->
    <!--        <include refid="TableName"/>-->
    <!--    </select>-->

    <select id="pageAll" resultMap="BaseResultMap" parameterType="com.github.pagehelper.Page">
        select
        <include refid="BaseColumnList"/>
        from
        <include refid="TableName"/>
        where 1 = 1
        <if test="userEntity.username != null and userEntity.username != ''">
            and `username` like concat('%',#{userEntity.username},'%')
        </if>
        <if test="userEntity.email != null and userEntity.email != ''">
            and `email` like concat('%',#{userEntity.email},'%')
        </if>
        <if test="userEntity.emailIsVerified != null">
            and `email_is_verified` = #{userEntity.emailIsVerified}
        </if>
        <if test="userEntity.departmentId != null">
            and `department_id` = #{userEntity.departmentId}
        </if>
        <if test="userEntity.enabled != null">
            and `enabled` = #{userEntity.enabled}
        </if>
        <if test="gmtDeletedStart != null and gmtDeletedStart != '' and gmtDeletedEnd != null and gmtDeletedEnd != ''">
            <![CDATA[  and `gmt_deleted` >= #{gmtDeletedStart} and `gmt_deleted` <= #{gmtDeletedEnd} ]]>
        </if>
        <if test="gmtCreatedStart != null and gmtCreatedStart != '' and gmtCreatedEnd != null and gmtCreatedEnd != ''">
            <![CDATA[  and `gmt_created` >= #{gmtCreatedStart} and `gmt_created` <= #{gmtCreatedEnd} ]]>
        </if>
        <!--        <if test="gmtCreatedStart != null and gmtCreatedStart != ''">-->
        <!--            and `gmt_created` >= #{gmtCreatedEnd}-->
        <!--        </if>-->
        <!--        <if test=" gmtCreatedEnd != null and gmtCreatedEnd != ''">-->
        <!--          and `gmt_created` <= #{gmtCreatedEnd}-->
        <!--        </if>-->
    </select>

    <!--    <select id="pageAllByPage" resultMap="BaseResultMap" parameterType="com.github.pagehelper.Page">-->
    <!--        select-->
    <!--        <include refid="BaseColumnList"/>-->
    <!--        from-->
    <!--        <include refid="TableName"/>-->
    <!--    </select>-->

    <!--        <select id="countAll" resultType="int">-->
    <!--            select count(1) from-->
    <!--            <include refid="TableName"/>-->
    <!--        </select>-->

    <select id="pageAllByDepartmentId" resultMap="BaseResultMap" parameterType="com.github.pagehelper.Page">
        select
        <include refid="BaseColumnList"/>
        from
        <include refid="TableName"/>
        where department_id = #{departmentId}
    </select>

    <select id="getOneByUsername" resultMap="BaseResultMap" parameterType="string">
        select
        <include refid="BaseColumnList"/>
        from
        <include refid="TableName"/>
        where username = #{username} limit 1
    </select>

    <select id="getOneByEmail" resultMap="BaseResultMap" parameterType="string">
        select
        <include refid="BaseColumnList"/>
        from
        <include refid="TableName"/>
        where email = #{email} limit 1
    </select>

    <select id="getOneByCellphone" resultMap="BaseResultMap" parameterType="string">
        select
        <include refid="BaseColumnList"/>
        from
        <include refid="TableName"/>
        where cellphone = #{cellphone} limit 1
    </select>

    <delete id="deleteAll">
        delete from
        <include refid="TableName"/>
        where `id` in
        (
        <foreach collection="list" item="item" index="index" separator=",">
            #{item}
        </foreach>
        );
        delete from `user_role` where `id` in
        (
        <foreach collection="list" item="item" index="index" separator=",">
            #{item}
        </foreach>
        );

        delete from `user_password_reset` where `id` in
        (
        <foreach collection="list" item="item" index="index" separator=",">
            #{item}
        </foreach>
        );
    </delete>

    <update id="fakeDeleteAll">
        update
        <include refid="TableName"/>
        set `gmt_deleted` = #{gmtDeleted}
        where `id` in
        (
        <foreach collection="idList" item="item" index="index" separator=",">
            #{item}
        </foreach>
        )
    </update>

    <update id="revokeFakeDeleteAll">
        update
        <include refid="TableName"/>
        set `gmt_deleted` = null
        where `id` in
        (
        <foreach collection="idList" item="item" index="index" separator=",">
            #{item}
        </foreach>
        )
    </update>

</mapper>
